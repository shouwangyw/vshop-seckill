<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <parent>
    <groupId>com.veli.vshop</groupId>
    <artifactId>vshop-seckill-parent</artifactId>
    <version>1.0.0-SNAPSHOT</version>
    <relativePath>../pom.xml</relativePath>
  </parent>

  <artifactId>vshop-web</artifactId>
  <packaging>jar</packaging>

  <dependencies>
    <dependency>
      <groupId>com.veli.vshop</groupId>
      <artifactId>vshop-common</artifactId>
      <version>${project.version}</version>
    </dependency>
    <dependency>
      <groupId>com.veli.vshop</groupId>
      <artifactId>vshop-service</artifactId>
      <version>${project.version}</version>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-web</artifactId>
    </dependency>
    <dependency>
      <groupId>com.alibaba</groupId>
      <artifactId>druid-spring-boot-starter</artifactId>
    </dependency>
  </dependencies>

  <build>
    <finalName>seckill-web</finalName>
    <plugins>
      <plugin>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-maven-plugin</artifactId>
      </plugin>
      <!-- 指定jdk -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <configuration>
          <source>1.8</source>
          <target>1.8</target>
          <encoding>UTF-8</encoding>
        </configuration>
      </plugin>
      <plugin>
        <groupId>com.spotify</groupId>
        <artifactId>docker-maven-plugin</artifactId>
        <version>0.4.13</version>
        <configuration>
          <!--dockerfile 指令：变成插件配置-->
          <!--用于指定镜像名称-->
          <imageName>hub.veli.com/vshop/${project.artifactId}:${project.version}</imageName>
          <!--用于指定基础镜像，相当于Dockerfile中的FROM指令-->
          <baseImage>hub.veli.com/library/jdk1.8.0:241</baseImage>
          <!--指定工作目录-->
          <!--<workdir>/</workdir>-->
          <maintainer>admin</maintainer>
          <cmd>["java","-version"]</cmd>
          <!--相当于Dockerfile的ENTRYPOINT指令-->
          <!--dockerfile : entryPoint-->
          <entryPoint>["java","-jar","/${project.build.finalName}.jar"]</entryPoint>
          <!--指定harbor镜像仓库地址,指定：镜像仓库用户名，密码-->
          <serverId>my-docker-registry</serverId>
          <!--是否跳过docker build-->
          <!--<skipDockerBuild>true</skipDockerBuild>-->
          <resources>
            <resource>
              <!--workdir ADD xx.jar / -->
              <!--workdir 工作目录-->
              <targetPath>/</targetPath>
              <!--用于指定需要复制的根目录，${project.build.directory}表示target目录-->
              <directory>${project.build.directory}</directory>
              <!--用于指定需要复制的文件。${project.build.finalName}.jar指的是打包后的jar包文件-->
              <include>${project.build.finalName}.jar</include>
            </resource>
          </resources>
          <!--使用本地镜像仓库使用-->
          <!-- <dockerHost>http://192.168.254.116:1234</dockerHost>-->
        </configuration>
      </plugin>
    </plugins>
  </build>
</project>